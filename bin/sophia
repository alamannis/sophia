#!/usr/bin/env perl
#                   _     _       
#   ___  ___  _ __ | |__ (_) __ _ 
#  / __|/ _ \| '_ \| '_ \| |/ _` |
#  \__ \ (_) | |_) | | | | | (_| |
#  |___/\___/| .__/|_| |_|_|\__,_|
#  =========~|_|~=================
#
#       sophia Perl IRC bot

package sophia;
require 5.10.0;
use strict;
use warnings;
use Carp qw(carp croak);
use FindBin qw($Bin);
use lib "$Bin/../src";
use POE qw(Component::IRC);
use POSIX qw(setsid);
use Sub::Delete;
use feature 'switch';

our $VERSION = 'sophia-1.0-dev';
our $CONFIG = 'sophia.conf';
our $MODULES_CONFIG = 'sophia.modules.conf';

require Main;

# don't run sophia as root idiot!
trigger_error('sophia', 'Do not run sophia as root!') if  $> == 0;

# due to lack of expertise, sophia currently does not support Windows
trigger_error('sophia', 'Currently, sophia is not supporting Windows.') if  $^O =~ /win/i;

# load configuration values
# ... and if it doesn't exist?
trigger_error('sophia', 'Missing config file.') unless -e "$Bin/../etc/$CONFIG";

our (%COMMANDS, %MODULES, %TIMERS, $sophia);
require ModuleHandler;
require sophia;

my %SOPHIA = (
    admins      => {},
    channels    => {},
    ircname     => 'sophia',
    nick        => 'sophia',
    owners      => {},
    password    => '',
    port        => 6667,
    server      => 'chat.freenode.net',
    trigger     => '!',
    usermode    => '+i',
    username    => 'sophia',
    usessl      => 0,
);

# and to read the config ...
my ($pred, $val);

open CONF, "$Bin/../etc/$CONFIG" or trigger_error('sophia', "Error opening config file: $!");
LINE: while (<CONF>) {
    chomp;
    s/^\s+//;
    next LINE if /^#/ or /^\s*$/ or !/\=/;  # ignoring comments and lame lines

    ($pred, $val) = split /\s*=\s*/;
    $val = substr $val, index($val, '"')+1;
    $val = substr $val, 0, index($val, '"');

    given ($pred) {
        when ("admin")    { $SOPHIA{admins}{$val} = 1; }
        when ("channel")  { $SOPHIA{channels}{$val} = 1; }
        when ("nick")     { $SOPHIA{nick} = $val; }
        when ("owner")    { $SOPHIA{owners}{$val} = 1; }
        when ("password") { $SOPHIA{password} = $val; }
        when ("port")     {
            if ( $val =~ /^\+/ ) {
                $SOPHIA{usessl} = 1;
                $val =~ s/^\+//;
            }
            $SOPHIA{port} = $val;
        }
        when ("realname") { $SOPHIA{ircname} = $val; }
        when ("server")   { $SOPHIA{server} = $val; }
        when ("trigger")  { $SOPHIA{trigger} = $val; }
        when ("usermode") { $SOPHIA{usermode} = $val; }
        when ("username") { $SOPHIA{username} = $val; }
    }
}
close CONF;

my $pid = fork();

unless ($pid == 0) {
    print "sophia forked into the background with pid: $pid\n";
    sophia_log('sophia',"sophia forked into the background with pid: $pid");
    exit;
}
else {
    $pid = $$;
}

open PIDFILE, "> $Bin/../etc/sophia.pid" or trigger_error('sophia', 'Missing etc directory.');
print PIDFILE $pid;
close PIDFILE;

open STDIN, '/dev/null' or trigger_error('sophia', "sophia cannot read /dev/null: $!\n");
open STDOUT, '>> /dev/null' or trigger_error('sophia', "sophia cannot write to /dev/null: $!\n");
open STDERR, '>> /dev/null' or trigger_error('sophia', "sophia cannot write to /dev/null: $!\n");

setsid or trigger_error('sophia', "sophia cannot start a new session: $!");

$sophia = POE::Component::IRC->spawn(
    Nick        => $SOPHIA{nick},
    Username    => $SOPHIA{username},
    Password    => $SOPHIA{password},
    Ircname     => $SOPHIA{ircname},
    Server      => $SOPHIA{server},
    Port        => $SOPHIA{port},
    UseSSL      => $SOPHIA{usessl},
) or trigger_error('sophia', "Unable to spawn POE::Component::IRC: $!\n");

POE::Session->create(
    inline_states => {
        _default    => \&_default,
        _start      => \&_start,
        irc_001     => \&irc_001,
        irc_public  => \&irc_public,
        irc_msg     => \&irc_msg,
        load_timers => \&load_timers,
    },
    heap => { irc => \$sophia },
);

sub _start {
    my $heap = $_[HEAP];
    my $sophia = ${$heap->{irc}};

    trigger_error('sophia', "Unable to get the sophia instance from heap (start): $!\n")
        unless $sophia;

    $sophia->yield( register =>  'all' );
    $sophia->yield( connect => { } );

    return;
}

sub irc_001 {
    my $sender = $_[SENDER];
    my $sophia = $sender->get_heap();
    
    trigger_error('sophia', "Unable to get a sophia instance from heap (001): $!\n")
        unless $sophia;

    # identify to NickServ (if need be)
    $sophia->yield( privmsg => 'NickServ' => sprintf('identify %s %s', $sophia->{nick}, $sophia->{password}) )
        if $sophia->{password};

    # user modes
    $sophia->yield( mode => sprintf('%s %s', $sophia->{nick}, $SOPHIA{usermodes}) )
        if $sophia->{usermodes};

    $sophia->yield( join => $_ ) for keys %{$SOPHIA{channels}};

    # load modules
    sophia_load_modules();

    # hook up timers
    $_[KERNEL]->alarm( 'load_timers' => time() + 1 );
}

sub load_timers {
    sophia_load_timers(\$_[KERNEL]);
    $_[KERNEL]->alarm( 'load_timers' => time() + 60 );
}

sub irc_public {
    my ($sender, $who, $where, $content) = @_[SENDER, ARG0 .. ARG2];
    return unless $content =~ /^$SOPHIA{trigger}/;
    $content =~ s/^$SOPHIA{trigger}//;

    my ($module, $command, @args);
    @args = split / /, $content;

    if ($args[0] =~ m/([^:]+):(.+)/) {
        $module = $1;
        $command = $2;

        return unless $COMMANDS->{$module}{$command};

        &{$COMMANDS->{$module}{$command}{init}}();
    }

    #my $recipient = $where->[0];
}

sub irc_msg {
}

sub _default {
	my ($event, $args) = @_[ARG0 .. $#_];
	my @output = ( "$event: " );

	for my $arg (@$args) {
		if ( ref $arg eq 'ARRAY' ) {
			push( @output, '[' . join(', ', @$arg ) . ']' );
		}
		else {
			push ( @output, "'$arg'" );
		}
	}
	print join ' ', @output, "\n";
	return 0;
}

POE::Kernel->run();
